# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics RT-DETR-l hybrid object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/rtdetr
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 1 # number of classes
scale: # model compound scaling constants, i.e. 'model=yolov8n-cls.yaml' will call yolov8-cls.yaml with scale 'n'
  # [depth, width, max_channels]
  s: [0.17, 0.125, 128]
  

backbone:
  # [from, repeats, module, args]
  - [-1, 1, HGStem, [4, 6]] # 0-P2/4
  - [-1, 1, HGBlock, [6, 16, 3]] # stage 1

  - [-1, 1, DWConv, [16, 3, 2, 1, False]] # 2-P3/8
  - [-1, 1, HGBlock, [12, 64, 3]] # stage 2

  - [-1, 1, DWConv, [64, 3, 2, 1, False]] # 4-P3/16
  - [-1, 1, HGBlock, [24, 128, 5, True, False]] # cm, c2, k, light, shortcut
  - [-1, 1, HGBlock, [24, 128, 5, True, True]]
  - [-1, 1, HGBlock, [24, 128, 5, True, True]] # stage 3

  - [-1, 1, DWConv, [128, 3, 2, 1, False]] # 8-P4/32
  - [-1, 1, HGBlock, [48, 256, 5, True, False]] # stage 4

head:
  - [-1, 1, Conv, [16, 1, 1, None, 1, 1, False]] # 10 input_proj.2
  - [-1, 1, AIFI, [64, 8]] # Further reduced AIFI channels
  - [-1, 1, Conv, [16, 1, 1]] # 12, Y5, lateral_convs.0

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [7, 1, Conv, [16, 1, 1, None, 1, 1, False]] # 14 input_proj.1
  - [[-2, -1], 1, Concat, [1]]
  - [-1, 1, RepC3, [16]] # 16, fpn_blocks.0
  - [-1, 1, Conv, [16, 1, 1]] # 17, Y4, lateral_convs.1

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [3, 1, Conv, [16, 1, 1, None, 1, 1, False]] # 19 input_proj.0
  - [[-2, -1], 1, Concat, [1]] # cat backbone P4
  - [-1, 1, RepC3, [16]] # X3 (21), fpn_blocks.1

  - [-1, 1, Conv, [16, 3, 2]] # 22, downsample_convs.0
  - [[-1, 17], 1, Concat, [1]] # cat Y4
  - [-1, 1, RepC3, [16]] # F4 (24), pan_blocks.0

  - [-1, 1, Conv, [16, 3, 2]] # 25, downsample_convs.1
  - [[-1, 12], 1, Concat, [1]] # cat Y5
  - [-1, 1, RepC3, [16]] # F5 (27), pan_blocks.1

  - [[21, 24, 27], 1, RTDETRDecoder, [1]] # Detect(P3, P4, P5)
